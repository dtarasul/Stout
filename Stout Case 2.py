#!/usr/bin/env python
# coding: utf-8

# In[1]:


import csv
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import statsmodels.api as sm
import numpy as np
import math 
import seaborn as sns


# In[3]:


orders = pd.read_csv("casestudy.csv")


# In[48]:


orders = orders.rename(columns = {"Unnamed: 0": "row"})


# In[23]:


#current year revenue

current_year = max(orders.year)
currentyear_revenue = sum(orders[orders.year == current_year].net_revenue)
print(currentyear_revenue)


# In[77]:


#old and current customers
old_customers = np.unique(orders[orders.year != current_year].customer_email)
current_customers = np.unique(orders[orders.year == current_year].customer_email)


# In[80]:


#new customer revenue
#start by making a dictionary with all customers and their corresponding revenues
#we will only use this for graphs at the end
customer_dict = {}

for i in range(len(orders)):
    if orders.at[i, "customer_email"] not in customer_dict:
        customer_dict[orders.at[i, "customer_email"]] = orders.at[i, "net_revenue"]
    else:
        customer_dict[orders.at[i, "customer_email"]] += orders.at[i, "net_revenue"]


# In[103]:


customer_dict_current = {}
orders_current = pd.DataFrame(orders[orders.year == current_year])

for i in range(435940, 685927):
    if orders_current.at[i, "customer_email"] not in customer_dict_current:
        customer_dict_current[orders_current.at[i, "customer_email"]] = orders_current.at[i, "net_revenue"]
    else:
        customer_dict_current[orders_current.at[i, "customer_email"]] += orders_current.at[i, "net_revenue"]


# In[104]:


customer_dict_prev = {}
orders_prev = orders[orders.year == (current_year - 1)]

for i in range(231294, 435940):
    if orders_prev.at[i, "customer_email"] not in customer_dict_prev:
        customer_dict_prev[orders_prev.at[i, "customer_email"]] = orders_prev.at[i, "net_revenue"]
    else:
        customer_dict_prev[orders_prev.at[i, "customer_email"]] += orders_prev.at[i, "net_revenue"]


# In[120]:


customer_dict_2prev = {}
orders_2prev = orders[orders.year == (current_year - 2)]

for i in range(0, 231294):
    if orders_2prev.at[i, "customer_email"] not in customer_dict_2prev:
        customer_dict_2prev[orders_2prev.at[i, "customer_email"]] = orders_2prev.at[i, "net_revenue"]
    else:
        customer_dict_2prev[orders_prev.at[i, "customer_email"]] += orders_2prev.at[i, "net_revenue"]


# In[116]:


#new customer revenue 
new_cust_revenue = 0
for i in np.unique(orders.customer_email):
    if i not in customer_dict_prev.keys():
        if i in customer_dict_current: #this seems redundant but for some reason there were issues, maybe dirty data?
            new_cust_revenue += customer_dict_current[i]

new_cust_revenue


# In[121]:


#existing customer growth
#operating under the assumption that existing customers from prev year are those that were customers 2 years ago

exist_prev_rev = 0
for i in np.unique(orders.customer_email):
    if i in customer_dict_prev.keys():
        if i in customer_dict_2prev: 
            exist_prev_rev += customer_dict_prev[i]
            
existing_cust_growth = (currentyear_revenue - new_cust_revenue) - exist_prev_rev

existing_cust_growth


# In[118]:


#revenue lost from attrition
#attrition is the customers we have lost, so it is the revenue generated by those customers that were here last year and not this year

attrition_rev = 0

for i in np.unique(orders.customer_email):
    if i in customer_dict_prev.keys():
        if i not in customer_dict_current:
            attrition_rev += customer_dict_prev[i]

attrition_rev


# In[122]:


#existing customer revenue current year

exist_current_rev = 0

for i in np.unique(orders.customer_email):
    if i in customer_dict_prev:
        if i in customer_dict_current:
            exist_current_rev += customer_dict_current[i]

exist_current_rev


# In[123]:


#existing customer revenue previous year
exist_prev_rev


# In[125]:


#total customers current year 

total_cust_curr = len(customer_dict_current)

total_cust_curr


# In[126]:


#total customers previous year

total_cust_prev = len(customer_dict_prev)

total_cust_prev


# In[129]:


#new customers
new_customers = []
for i in np.unique(orders.customer_email):
    if i not in customer_dict_prev:
        if i in customer_dict_current:
            new_customers.append(i)
#not printing result because it is very long


# In[130]:


#lost customers
lost_customers = []
for i in np.unique(orders.customer_email):
    if i in customer_dict_prev:
        if i not in customer_dict_current:
            lost_customers.append(i)
#not printing result because it is very long


# In[139]:


pd.DataFrame(customer_dict.values()).hist(bins = 100)
plt.title("Distribution of Lifetime Customer Revenues")
plt.xlabel("Total Revenue Per Customer")
plt.ylabel("Number of Customers")
plt.show()


# In[142]:


pd.DataFrame(customer_dict_current.values()).hist(bins = 100)
plt.title("Distribution of Current Customer Revenues")
plt.xlabel("Total Revenue Per Customer")
plt.ylabel("Number of Customers")
plt.show()


# In[143]:


pd.DataFrame(customer_dict_prev.values()).hist(bins = 100)
plt.title("Distribution of Previous Customer Revenues")
plt.xlabel("Total Revenue Per Customer")
plt.ylabel("Number of Customers")
plt.show()


# In[146]:


pd.DataFrame(customer_dict_2prev.values()).hist(bins = 100)
plt.title("Distribution of Two Years Previous Customer Revenues")
plt.xlabel("Total Revenue Per Customer")
plt.ylabel("Number of Customers")
plt.show()


# In[145]:


print("From these histograms we see that in any given year, there is very little variation in how much each customer pays, and so any lifetime differences are only attributable to how long someone was a customer.")


# In[157]:


yearly_revenues = orders.groupby(["year"]).sum()

yearly_revenues.hist(column = "net_revenue")


# In[154]:


print("To confirm our previous conclusion, revenue across years is practically the same, which also means that losses from attrition are generally matched by gains from new customers.")

